plugins {
    id 'com.android.application'
    id "junkcode"
}

android {
    namespace 'com.luoye.dpt.junkcode'
    compileSdk 34

    defaultConfig {
        applicationId "com.luoye.dpt.junkcode"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def afterAssembleCopy(Project project, boolean debug) {
    def buildTypeName = "release"
    def dexSourceDirName = "minifyReleaseWithR8"
    if(debug) {
        buildTypeName = "debug"
        dexSourceDirName = "minifyDebugWithR8"
    }

    def targetDir = file(project.rootDir.absolutePath + File.separator + "executable" + File.separator + "shell-files")
    def sourceDir = file(project.buildDir.absolutePath + File.separator + "intermediates" + File.separator + "dex" + File.separator + buildTypeName + File.separator + dexSourceDirName)
    println(">> " + sourceDir + " -> " + targetDir)
    def status = delete(fileTree(targetDir.absolutePath) {
        include 'dex/junkcode.dex'
    })

    println("afterAssembleCopy junk dex delete status: " + status)

    copy {
        from sourceDir.absolutePath + File.separator + "classes.dex"
        rename { fileName ->
            fileName.replace("classes.dex","junkcode.dex")
        }
        into targetDir.absolutePath + File.separator + "dex"
    }

}

afterEvaluate { Project project ->
    if (project.name != "junkcode") {
        printf("project %s skip\n", project.name)
        return
    }
    def assembleTask = project.tasks.getByName("assemble")
    def assembleDebugTask = project.tasks.getByName("assembleDebug")
    def assembleReleaseTask = project.tasks.getByName("assembleRelease")

    def list = project.gradle.startParameter.taskNames
    if(list == null || list.size() == 0) {
        return
    }

    def firstTaskName = list.get(0)

    println("first task: " + firstTaskName)

    def buildTask = assembleTask
    def debug = false
    if(firstTaskName == "junkcode:assemble" || firstTaskName == "assemble") {
        buildTask = assembleTask
        debug = false
    }
    else if(firstTaskName == "junkcode:assembleRelease" || firstTaskName == "assembleRelease") {
        buildTask = assembleReleaseTask
        debug = false
    }
    else if(firstTaskName == "junkcode:assembleDebug" || firstTaskName == "assembleDebug") {
        buildTask = assembleDebugTask
        debug = true
    }

    buildTask.doLast {
        afterAssembleCopy(project, debug)
    }

}


dependencies {
}